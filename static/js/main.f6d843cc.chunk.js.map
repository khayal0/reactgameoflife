{"version":3,"sources":["components/cell.js","components/game.js","App.js","registerServiceWorker.js","index.js"],"names":["Cell","_this$props","this","props","x","y","CELL_SIZE","react_default","a","createElement","className","style","left","concat","top","width","height","Component","WIDTH","HEIGHT","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","cells","isRunning","interval","handleClick","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","runGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleClear","makeEmptyBoard","handleRandom","random","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","push","_this2","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","_this3","_this$state","backgroundSize","onClick","ref","n","map","cell","components_cell","key","onChange","App","game","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f6d843cc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Cell extends Component {\r\n  render() {\r\n    const { x, y, CELL_SIZE } = this.props;\r\n    return (\r\n      <div\r\n        className=\"Cell\"\r\n        style={{\r\n          left: `${CELL_SIZE * x + 1}px`,\r\n          top: `${CELL_SIZE * y + 1}px`,\r\n          width: `${CELL_SIZE - 1}px`,\r\n          height: `${CELL_SIZE - 1}px`\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Cell;\r\n","import React, { Component } from \"react\";\nimport Cell from \"./cell.js\";\n\nconst CELL_SIZE = 15;\nconst WIDTH = 800;\nconst HEIGHT = 500;\n\nclass Game extends Component {\n  constructor() {\n    super();\n    this.rows = HEIGHT / CELL_SIZE;\n    this.cols = WIDTH / CELL_SIZE;\n\n    this.board = this.makeEmptyBoard();\n  }\n\n  state = {\n    cells: [],\n    isRunning: false,\n    interval: 20\n  };\n\n  componentDidMount() {\n    this.handleRandom();\n  }\n\n  makeEmptyBoard() {\n    let board = [];\n    for (let y = 0; y < this.rows; y++) {\n      board[y] = [];\n      for (let x = 0; x < this.cols; x++) {\n        board[y][x] = false;\n      }\n    }\n\n    return board;\n  }\n\n  getElementOffset() {\n    const rect = this.boardRef.getBoundingClientRect();\n    const doc = document.documentElement;\n\n    return {\n      x: rect.left + window.pageXOffset - doc.clientLeft,\n      y: rect.top + window.pageYOffset - doc.clientTop\n    };\n  }\n\n  makeCells() {\n    let cells = [];\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        if (this.board[y][x]) {\n          cells.push({ x, y });\n        }\n      }\n    }\n\n    return cells;\n  }\n\n  handleClick = event => {\n    const elemOffset = this.getElementOffset();\n    const offsetX = event.clientX - elemOffset.x;\n    const offsetY = event.clientY - elemOffset.y;\n\n    const x = Math.floor(offsetX / CELL_SIZE);\n    const y = Math.floor(offsetY / CELL_SIZE);\n\n    if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n      this.board[y][x] = !this.board[y][x];\n    }\n\n    this.setState({ cells: this.makeCells() });\n  };\n\n  runGame = () => {\n    this.setState({ isRunning: true });\n    this.runIteration();\n  };\n\n  stopGame = () => {\n    this.setState({ isRunning: false });\n    if (this.timeoutHandler) {\n      window.clearTimeout(this.timeoutHandler);\n      this.timeoutHandler = null;\n    }\n  };\n\n  runIteration() {\n    let newBoard = this.makeEmptyBoard();\n\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        let neighbors = this.calculateNeighbors(this.board, x, y);\n        if (this.board[y][x]) {\n          if (neighbors === 2 || neighbors === 3) {\n            newBoard[y][x] = true;\n          } else {\n            newBoard[y][x] = false;\n          }\n        } else {\n          if (!this.board[y][x] && neighbors === 3) {\n            newBoard[y][x] = true;\n          }\n        }\n      }\n    }\n\n    this.board = newBoard;\n    this.setState({ cells: this.makeCells() });\n\n    this.timeoutHandler = window.setTimeout(() => {\n      this.runIteration();\n    }, this.state.interval);\n  }\n\n  /**\n   * Calculate the number of neighbors at point (x, y)\n   * @param {Array} board\n   * @param {int} x\n   * @param {int} y\n   */\n\n  calculateNeighbors(board, x, y) {\n    let neighbors = 0;\n    const dirs = [\n      [-1, -1],\n      [-1, 0],\n      [-1, 1],\n      [0, 1],\n      [1, 1],\n      [1, 0],\n      [1, -1],\n      [0, -1]\n    ];\n    for (let i = 0; i < dirs.length; i++) {\n      const dir = dirs[i];\n      let y1 = y + dir[0];\n      let x1 = x + dir[1];\n\n      if (\n        x1 >= 0 &&\n        x1 < this.cols &&\n        y1 >= 0 &&\n        y1 < this.rows &&\n        board[y1][x1]\n      ) {\n        neighbors++;\n      }\n    }\n\n    return neighbors;\n  }\n\n  handleIntervalChange = event => {\n    this.setState({ interval: event.target.value });\n  };\n\n  handleClear = () => {\n    this.board = this.makeEmptyBoard();\n    this.setState({ cells: this.makeCells() });\n  };\n\n  handleRandom = () => {\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        this.board[y][x] = Math.random() >= 0.5;\n      }\n    }\n\n    this.setState({ cells: this.makeCells() });\n  };\n\n  render() {\n    const { cells, interval, isRunning } = this.state;\n    return (\n      <div>\n        <div\n          className=\"Board\"\n          style={{\n            width: WIDTH,\n            height: HEIGHT,\n            backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`\n          }}\n          onClick={this.handleClick}\n          ref={n => {\n            this.boardRef = n;\n          }}\n        >\n          {cells.map(cell => (\n            <Cell\n              x={cell.x}\n              y={cell.y}\n              key={`${cell.x},${cell.y}`}\n              CELL_SIZE={CELL_SIZE}\n            />\n          ))}\n        </div>\n\n        <div className=\"controls\">\n          Update every{\" \"}\n          <input\n            value={this.state.interval}\n            onChange={this.handleIntervalChange}\n          />{\" \"}\n          msec\n          {isRunning ? (\n            <button\n              className=\"btn btn-primary btn-sm m-1 \"\n              onClick={this.stopGame}\n            >\n              Stop\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-primary btn-sm m-1\"\n              onClick={this.runGame}\n            >\n              Run\n            </button>\n          )}\n          <button\n            className=\"btn btn-primary btn-sm m-1\"\n            onClick={this.handleRandom}\n          >\n            Random\n          </button>\n          <button\n            className=\"btn btn-primary btn-sm m-1\"\n            onClick={this.handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Game from \"./components/game\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Conway's Game of Life</h2>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}